package gt

import "time"

// See the goThoom version
var GoThoomVersion int

// Print to the console window
func PrintToConsole(msg string) {}

// Show a notification on the bottom right
func ShowNotification(msg string) {}

// Add a hotkey
func AddHotkey(combo, command string) {}

// Returns a list of hotkeys
func GetHotkeys() []HotKey { return nil }

// Remove a specific hotkey by keycombo
func RemoveHotkey(combo string) {}

func AddCommand(command string, handler func(args string)) {}

// Sends this to the server right now
func SendNow(msg string) {}

// Sends command when player isn't typing stuff in
func SendIdle(msg string) {}

// These strings are the same, but upper/lowercase doesn't matter
func EqualAnycase(a, b string) bool {}

// The text starts with <prefix>
func StartsWith(text, prefix string) bool { return false }

// The text ends with <suffix>
func EndsWith(text, suffix string) bool { return false }

// This includes this text somewhere
func Includes(text, input) bool { return false }

// Returns the text all lowercase
func ToLowercase(text string) string { return "" }

// Returns the text in all uppercase
func ToUppercase(text string) string { return "" }

// Trims spaces from the beginning and end
func TrimSpaces(text string) string { return "" }

// Returns a list of words from text
func GetWords(text string) []string { return nil }

// Rejoins a list of words to text
func JoinWords(parts []string) string { return "" }

// If it finds 'input' at the start, it returns 'replacement'
func AddOneMacro(input, replacement string) {}

// Add many macros at once
func AddMacros(macros map[string]string) string {}

// Autoreplies to a message <trigger> with <command>
func AutoReply(trigger, command string) {}

// Get the name of our player
func PlayerName() string { return "" }

// Get a list of known players
func GetPlayerlist() []Player { return nil }

// Get chat
func GetChat(fn func(name, messageType, message string)) {}

// Modifies player input text
func ModifyTypedMessage(fn func(text string) string) {}

// Get the player's inventory
func GetInventory() []InventoryItem { return nil }

// Gets the text current in the input bar of the console window
func ReadInputVBar() string {}

// Put new text in the input bar of the console window
func WriteToInputBar(msg string) {}

// Get our player's stats
func GetPlayerStats() Stats { return Stats{} }

// Equip an item
func EquipItem(itemName string) {}

// Unequip and item
func UnequipItem(itemName string) {}

// Play a sound
func PlaySound(id int) {}

// Is this key currently held down
func IsKeyHeld(name string) bool { return false }

// Was this key just clicked
func KeyClicked(name string) bool { return false }

// Is this mousekey held
func MouseHeld(name string) bool { return false }

// Was this mousekey clicked
func MouseClicked(name string) bool { return false }

// Tell us where the player clicked last
func LastMouseClick() ClickInfo { return nil }

// Get a list of items that are equipped
func GetEquippedItems() []InventoryItems { return nil }

// Does the player have this item
func PlayerHasItem(name string) bool { return false }

// Get the current frame number, useful for exact game timing
func GetGameFrame() int { return 0 }

type InventoryItem struct {
	ID       uint16
	Name     string
	Equipped bool
	Index    int
	IDIndex  int
	Quantity int
}

// Hotkey represents a single key binding and its metadata.
type Hotkey struct {
	Name     string
	Combo    string
	Commands []HotkeyCommand
	Plugin   string
	Disabled bool
}

// Data the a player contains
type Player struct {
	Name       string
	Race       string
	Gender     string
	Class      string
	Clan       string
	PictID     uint16
	Colors     []byte
	IsNPC      bool
	Sharee     bool
	Sharing    bool
	GMLevel    int
	Friend     bool
	Blocked    bool
	Ignored    bool
	Dead       bool
	FellWhere  string
	KillerName string
	Bard       bool
	SameClan   bool
	BeWho      bool
	LastSeen   time.Time
	Offline    bool
}

// Data a mobile has (player, npc or creature)
type Mobile struct {
	Index  uint8
	Name   string
	H, V   int16
	PictID uint16
	Colors uint8
}

// Data about a mouseclick
type MouseClickInfo struct {
	X, Y     int16
	OnMobile bool
	Mobile   Mobile
}

// Hotkey commands format
type HotkeyCommand struct {
	Command string
}

// Stats data of the player
type Stats struct {
	HP, HPMax           int
	SP, SPMax           int
	Balance, BalanceMax int
}
